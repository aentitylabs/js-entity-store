{"version":3,"file":"entitystore.js","mappings":"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","sources":["webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\bridge.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\deletesourceaction.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\entity.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\entityfactory.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\entityhandler.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\entityproperty.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\entitystore.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\loadsourceaction.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\nullsource.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\nullsourceaction.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\source.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\sourceaction.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\sourceactionfactory.ts","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\updatesourceaction.ts","webpack://EntityStoreLib/webpack/bootstrap","webpack://EntityStoreLib/C:\\work\\aentity\\workspace\\js-entity-store\\src\\main.ts"],"sourcesContent":["export abstract class Bridge {\r\n    public abstract send(actions: any, onReply: any): any;\r\n    public abstract reply(entities: any): void;\r\n}","import { Entity } from \"./entity\";\r\nimport { EntityFactory } from \"./entityfactory\";\r\nimport { Source } from \"./source\";\r\nimport { SourceAction } from \"./sourceaction\";\r\n\r\nexport class DeleteSourceAction extends SourceAction {\r\n    constructor(entity: Entity) {\r\n        super(\"DeleteSourceAction\", entity);\r\n    }\r\n\r\n    public sync(source: Source): void {\r\n        const serializedEntity = this.entity.serialize();\r\n\r\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\r\n\r\n        this.validateDelete(entityData);\r\n\r\n        source.delete(entityData);\r\n    }\r\n}","import { EntityFactory } from \"./entityfactory\";\r\nimport { EntityProperty } from \"./entityproperty\";\r\nimport { EntityStore } from \"./entitystore\";\r\nimport { NullSource } from \"./nullsource\";\r\nimport { Source } from \"./source\";\r\n\r\nexport class Entity {\r\n    private _entityStore: EntityStore;\r\n    protected _properties: any = {};\r\n    private _name: string;\r\n    private _key: string;\r\n    private _ref: Entity|undefined;\r\n    private _isReferenced: boolean = false;\r\n    private _source: Source = new NullSource();\r\n    private _isItem: boolean = false;\r\n    private _isCollection: boolean = false;\r\n    protected _item: any = {};\r\n    protected _itemPrototype: Entity|undefined;\r\n\r\n\r\n    public constructor(entityStore: EntityStore, name: string, ref?: Entity, item?: any)\r\n    {\r\n        this._entityStore = entityStore;\r\n\r\n        this._name = name;\r\n        this._key = name;\r\n        this._item = item;\r\n        this._isCollection = item ? true : false;\r\n\r\n        let source;\r\n\r\n        if(ref != null && ref != undefined) {\r\n            this._key = ref.getKey() + \"=>\" + this._key;\r\n            this._isReferenced = true;\r\n            source = ref._source;\r\n        }\r\n\r\n        this._ref = ref;\r\n\r\n        this._entityStore.register(this, source);\r\n\r\n        if(!ref) {\r\n            this._ref = this;\r\n            this._entityStore.load(this);\r\n        }\r\n\r\n        if(this._item) {\r\n            this._itemPrototype = EntityFactory.newEntity(this._entityStore, this._item, this);\r\n        }\r\n    }\r\n\r\n    public setKey(value: string) {\r\n        this._key = value;\r\n    }\r\n\r\n    public getKey(): string {\r\n        return this._key;\r\n    }\r\n\r\n    public setName(value: string) {\r\n        this._name = value;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this._name;\r\n    }\r\n\r\n    public getRef(): any {\r\n        return this._ref;\r\n    }\r\n\r\n    public getProperties(): any {\r\n        return this._properties;\r\n    }\r\n\r\n    public getSource() {\r\n        return this._source;\r\n    }\r\n\r\n    public getEntityStore() {\r\n        return this._entityStore;\r\n    }\r\n\r\n    public setSource(source: Source) {\r\n        this._source = source;\r\n    }\r\n\r\n    public isReferenced() {\r\n        return this._isReferenced;\r\n    }\r\n\r\n    public isCollection() {\r\n        return this._isCollection;\r\n    }\r\n\r\n    public setIsItem(value: boolean) {\r\n        this._isItem = value;\r\n    }\r\n\r\n    public isItem() {\r\n        return this._isItem;\r\n    }\r\n\r\n    public getItem() {\r\n        return this._item;\r\n    }\r\n\r\n    public getItemPrototype(): any {\r\n        return this._itemPrototype;\r\n    }\r\n\r\n    public delete() {\r\n        this._entityStore.delete(this);\r\n    }\r\n\r\n    public get(index: number) {\r\n        return this._properties[index].value;\r\n    }\r\n\r\n    public add(): Entity {\r\n        const entity = EntityFactory.newEntity(this._entityStore, this._item, this);\r\n\r\n        entity.deserialize(this.getItem());\r\n\r\n        const collectionSize = Object.keys(this.getProperties()).length;\r\n\r\n        this.getProperties()[collectionSize] = entity;\r\n\r\n        entity.setKey(entity.getKey() + \"[\" + (collectionSize) + \"]\");\r\n\r\n        entity.setIsItem(true);\r\n\r\n        this.getEntityStore().register(entity, this.getSource());\r\n\r\n        this.getEntityStore().update(entity);\r\n\r\n        this.getEntityStore().load(this);\r\n\r\n        return entity;\r\n    }\r\n\r\n    public remove(index: number) {\r\n        const toRemove = this.get(index);\r\n\r\n        this.getEntityStore().delete(toRemove);\r\n\r\n        this.getEntityStore().load(this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializedEntity: any = {};\r\n\r\n        serializedEntity[\"entity\"] = this.getName();\r\n        serializedEntity[\"properties\"] = {};\r\n        serializedEntity[\"ref\"] = this.isReferenced();\r\n\r\n        for(var key in this.getProperties()) {\r\n            serializedEntity[\"properties\"][key] = this.getProperties()[key].serialize();\r\n        }\r\n\r\n        return serializedEntity;\r\n    }\r\n    \r\n    public deserialize(entity: any) {\r\n        this.setName(entity[\"entity\"]);\r\n\r\n        if(!entity[\"properties\"]) {\r\n            return;\r\n        }\r\n\r\n        let i = 0;\r\n\r\n        for(let key in entity[\"properties\"]) {\r\n            const entityProperty = new EntityProperty(this.getEntityStore(), this);\r\n\r\n            entityProperty.deserialize(entity[\"properties\"][key]);\r\n\r\n            this.getProperties()[key] = entityProperty;\r\n\r\n            if(this.isCollection()) {\r\n                const entityItem = entityProperty.value;\r\n\r\n                entityItem.setKey(entityItem.getKey() + \"[\" + i + \"]\");\r\n\r\n                entityItem.setIsItem(true);\r\n\r\n                this.getEntityStore().register(entityItem, this.getSource());\r\n            }\r\n\r\n            i++;\r\n        }\r\n    }\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { EntityHandler } from \"./entityhandler\";\r\nimport { EntityStore } from \"./entitystore\";\r\n\r\nexport class EntityFactory {\r\n    public static newEntity(entityStore: EntityStore, entity: any, ref?: Entity) {\r\n        let newEntity: Entity|null = null;\r\n        \r\n        if(entity[\"collectionItem\"]) {\r\n            newEntity = new Entity(entityStore, entity[\"entity\"], ref, entity[\"collectionItem\"]);\r\n        }\r\n        else {\r\n            newEntity = new Entity(entityStore, entity[\"entity\"], ref);\r\n        }\r\n\r\n        newEntity.deserialize(entity);\r\n\r\n        const entityProxy = new Proxy(newEntity, new EntityHandler())\r\n\r\n        return entityProxy;\r\n    }\r\n\r\n    public static buildEntitySchemaFromData(entity: Entity, entityData: any): any {\r\n        const serializedEntity: any = {};\r\n\r\n        serializedEntity[\"entity\"] = entity.getName();\r\n        serializedEntity[\"properties\"] = {};\r\n        serializedEntity[\"ref\"] = entity.isReferenced();\r\n\r\n        for(let key in entityData) {\r\n            if(entity.isCollection() === true) {\r\n                serializedEntity[\"collectionItem\"] = entity.getItem();\r\n\r\n                if(entity.getItemPrototype()) {\r\n                    serializedEntity[\"properties\"][key] = EntityFactory.buildEntitySchemaFromData(entity.getItemPrototype(), entityData[key]);\r\n                }\r\n            }\r\n            else if(entity.getProperties()[key].isEntity === true) {\r\n                serializedEntity[\"properties\"][key] = EntityFactory.buildEntitySchemaFromData(entity.getProperties()[key].value, entityData[key]);\r\n            }\r\n            else {\r\n                serializedEntity[\"properties\"][key] = {\r\n                    \"value\": entityData[key]\r\n                };\r\n            }\r\n        }\r\n\r\n        return serializedEntity;\r\n    }\r\n\r\n    public static buildEntityDataFromSchema(entitySchema: any): any {\r\n        const entityData: any = {};\r\n\r\n        for(let key in entitySchema.properties) {\r\n            if(entitySchema.properties[key][\"entity\"]) {\r\n                entityData[key] = EntityFactory.buildEntityDataFromSchema(entitySchema.properties[key]);\r\n            }\r\n            else {\r\n                entityData[key] = entitySchema.properties[key][\"value\"];\r\n            }\r\n        }\r\n\r\n        return entityData;\r\n    }\r\n}\r\n","export class EntityHandler {\r\n    get(target: any, property: any, receiver: any): any {\r\n        if(target.getProperties()[property]) {\r\n            return target.getProperties()[property].value;\r\n        }\r\n\r\n        return target[property];\r\n    }\r\n\r\n    set(obj: any, property: any, value: any): boolean {\r\n        if(obj.getProperties()[property]) {\r\n            obj.getProperties()[property].value = value;\r\n\r\n            obj.getEntityStore().update(obj);\r\n\r\n            return true;\r\n        }\r\n\r\n        obj[property] = value;\r\n\r\n        return true;\r\n    }\r\n}","import { Entity } from \"./entity\";\r\nimport { EntityFactory } from \"./entityfactory\";\r\nimport { EntityStore } from \"./entitystore\";\r\n\r\nexport class EntityProperty {\r\n    private _entityStore: EntityStore;\r\n    private _ref: Entity|undefined;\r\n    private _isEntity: boolean = false;\r\n    private _value: any;\r\n\r\n\r\n    public constructor(entityStore: EntityStore, ref?: Entity)\r\n    {\r\n        this._entityStore = entityStore;\r\n        this._ref = ref;\r\n    }\r\n\r\n    public get isEntity() {\r\n        return this._isEntity;\r\n    }\r\n\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value) {\r\n        this._value = value;\r\n    }\r\n\r\n    public serialize(): any {\r\n        if(this._isEntity === true) {\r\n            return this._value.serialize();\r\n        }\r\n\r\n        return {\r\n            \"value\": this._value\r\n        };\r\n    }\r\n    \r\n    public deserialize(entityProperty: any) {\r\n        if(entityProperty[\"entity\"]) {\r\n            const ref: Entity|undefined = entityProperty[\"ref\"] === true ? this._ref : undefined;\r\n\r\n            this._value = EntityFactory.newEntity(this._entityStore, entityProperty, ref);\r\n            this._isEntity = true;\r\n\r\n            this._value.deserialize(entityProperty);\r\n\r\n            return;\r\n        }\r\n\r\n        this._value = entityProperty[\"value\"];\r\n    }\r\n}","import { Bridge } from \"./bridge\";\r\nimport { DeleteSourceAction } from \"./deletesourceaction\";\r\nimport { Entity } from \"./entity\";\r\nimport { EntityFactory } from \"./entityfactory\";\r\nimport { LoadSourceAction } from \"./loadsourceaction\";\r\nimport { NullSource } from \"./nullsource\";\r\nimport { Source } from \"./source\";\r\nimport { SourceAction } from \"./sourceaction\";\r\nimport { SourceActionFactory } from \"./sourceactionfactory\";\r\nimport { UpdateSourceAction } from \"./updatesourceaction\";\r\n\r\nexport class EntityStore {\r\n    private _sources: any = {};\r\n    private _entities: any = {};\r\n    private _actions: any = {};\r\n\r\n\r\n    public get actions() {\r\n        return this._actions;\r\n    }\r\n\r\n    public addSource(entityName: any, source: any) {\r\n        this._sources[entityName] = source;\r\n    }\r\n    \r\n    public register(entity: Entity, source?: Source): void {\r\n        this._entities[entity.getKey()] = entity;\r\n\r\n        if(!source) {\r\n            let entitySource = this._sources[entity.getName()];\r\n            \r\n            if(!entitySource) {\r\n                entity.setSource(new NullSource());\r\n            }\r\n            else {\r\n                entity.setSource(this._sources[entity.getName()]);\r\n            }\r\n        }\r\n        else {\r\n            entity.setSource(source);\r\n        }\r\n    }\r\n\r\n    public sync() {\r\n        while (Object.keys(this._actions).length > 0) {\r\n            const key = Object.keys(this._actions)[0];\r\n\r\n            const sourceAction: SourceAction = this._actions[key];\r\n\r\n            //TODO: gestire entità con source a null (null pattern!?)\r\n\r\n            /*$entityClass = get_class($sourceAction->getEntity());\r\n\r\n            if(array_key_exists($entityClass, $this->sources)) {\r\n                $sourceAction->sync($this->sources[get_class($sourceAction->getEntity())]);\r\n            }*/\r\n            sourceAction.sync(sourceAction.entity.getSource());\r\n\r\n            delete this._actions[key];\r\n        }\r\n    }\r\n\r\n    public syncTo(bridge: Bridge): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            const serializedActions: any = {};\r\n\r\n            for(const key in this._actions) {\r\n                const action: SourceAction = this._actions[key];\r\n                //$entityClass = get_class($action->getEntity());\r\n    \r\n                //if(array_key_exists($entityClass, $this->sources)) {\r\n                    action.sync(action.entity.getSource());\r\n                //}\r\n    \r\n                serializedActions[key] = SourceActionFactory.serialize(action);\r\n            }\r\n    \r\n            bridge.send(serializedActions, (entities: any) => {\r\n                while (Object.keys(this._actions).length > 0) {\r\n                    const key = Object.keys(this._actions)[0];\r\n        \r\n                    const sourceAction: SourceAction = this._actions[key];\r\n        \r\n                    const entityClass = sourceAction.entity.getName();\r\n        \r\n                    if(entities[entityClass]) {\r\n                        sourceAction.entity.deserialize(entities[entityClass]);\r\n        \r\n                        if(this._sources[entityClass]) {\r\n                            sourceAction.sync(this._sources[entityClass]);\r\n                        }\r\n                    }\r\n        \r\n                    delete this._actions[key];\r\n                }\r\n\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    public syncFrom(bridge: Bridge, receivedActions: any, onSync: any) {\r\n        const deserializedActions: any = {};\r\n        const entities: any = {};\r\n\r\n        for(const key in receivedActions) {\r\n            const action: any = receivedActions[key];\r\n\r\n            if(!this._entities[action[\"entityKey\"]]) {\r\n                this._entities[action[\"entityKey\"]] = EntityFactory.newEntity(this, action[\"entity\"], this._entities[action[\"refKey\"]]);\r\n            }\r\n\r\n            const entity = this._entities[action[\"entityKey\"]];\r\n\r\n            entity.deserialize(action[\"entity\"]);\r\n\r\n            deserializedActions[key] = SourceActionFactory.deserialize(action, entity);\r\n\r\n            const entityClass = deserializedActions[key].entity.getName();\r\n\r\n            if(this._sources[entityClass]) {\r\n                deserializedActions[key].sync(this._sources[entityClass]);\r\n\r\n                entities[entityClass] = deserializedActions[key].entity;\r\n            }\r\n        }\r\n\r\n        onSync();\r\n\r\n        this.sync();\r\n\r\n        const serializedEntities: any = {};\r\n\r\n        for(const key in entities) {\r\n            serializedEntities[key] = entities[key].serialize();\r\n        }\r\n\r\n        bridge.reply(serializedEntities);\r\n    }\r\n\r\n    public load(entity: Entity): void {\r\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\r\n            return this.load(entity.getRef());\r\n        }\r\n\r\n        this._actions[entity.getKey() + \"::load\"] = new LoadSourceAction(entity);\r\n    }\r\n\r\n    public update(entity: Entity): void {\r\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\r\n            return this.update(entity.getRef());\r\n        }\r\n\r\n        this._actions[entity.getKey() + \"::update\"] = new UpdateSourceAction(entity);\r\n    }\r\n\r\n    public delete(entity: Entity): void {\r\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\r\n            return this.delete(entity.getRef());\r\n        }\r\n\r\n        this._actions[entity.getKey() + \"::delete\"] = new DeleteSourceAction(entity);\r\n    }\r\n}","import { Entity } from \"./entity\";\r\nimport { EntityFactory } from \"./entityfactory\";\r\nimport { Source } from \"./source\";\r\nimport { SourceAction } from \"./sourceaction\";\r\n\r\nexport class LoadSourceAction extends SourceAction {\r\n    constructor(entity: Entity) {\r\n        super(\"LoadSourceAction\", entity);\r\n    }\r\n\r\n    public sync(source: Source): void {\r\n        const serializedEntity: any = this.entity.serialize();\r\n\r\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\r\n            \r\n        const loadedEntity = source.load(entityData);\r\n\r\n        this.validateLoad(loadedEntity);\r\n\r\n        const entitySchema = EntityFactory.buildEntitySchemaFromData(this.entity, loadedEntity);\r\n\r\n        this.entity.deserialize(entitySchema);\r\n    }\r\n}","import { Source } from \"./source\";\r\n\r\nexport class NullSource extends Source {\r\n    public load(entity: any) {\r\n        return entity;\r\n    }\r\n    \r\n    public update(entity: any) {\r\n        return entity;\r\n    }\r\n\r\n    public delete(entity: any): void {\r\n        \r\n    }\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { Source } from \"./source\";\r\nimport { SourceAction } from \"./sourceaction\";\r\n\r\nexport class NullSourceAction extends SourceAction {\r\n    constructor(entity: Entity) {\r\n        super(\"NullSourceAction\", entity);\r\n    }\r\n\r\n    public sync(source: Source): void {\r\n        throw new Error(\"NullSourceAction: method not implemented.\");\r\n    }\r\n}","export abstract class Source {\r\n    public abstract load(entity: any): any;\r\n    public abstract update(entity: any): any;\r\n    public abstract delete(entity: any): void;\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { Source } from \"./source\";\r\n\r\nexport abstract class SourceAction {\r\n    private _type: string;\r\n    private _entity: Entity;\r\n\r\n\r\n    constructor(type: string, entity: Entity) {\r\n        this._type = type;\r\n        this._entity = entity;\r\n    }\r\n\r\n    public abstract sync(source: Source): void;\r\n\r\n    public get type() {\r\n        return this._type;\r\n    }\r\n\r\n    public get entity() {\r\n        return this._entity;\r\n    }\r\n\r\n    public set entity(value) {\r\n        this._entity = value;\r\n    }\r\n\r\n    protected validateLoad(serializedEntity: any) {\r\n        /*$validators = $this->entity->getEntityStore()->getLoadValidators();\r\n\r\n        $entityClass = $this->getEntity()->name;\r\n\r\n        if(array_key_exists($entityClass, $validators)) {\r\n            $updateValidator = $validators[$entityClass];\r\n\r\n            if(!$updateValidator->isValid($serializedEntity)) {\r\n                throw new EntityLoadValidationException($updateValidator->getPropertyErrors());\r\n            }\r\n        }*/\r\n    }\r\n\r\n    protected validateUpdate(serializedEntity: any) {\r\n        /*$validators = $this->entity->getEntityStore()->getUpdateValidators();\r\n\r\n        $entityClass = $this->getEntity()->name;\r\n\r\n        if(array_key_exists($entityClass, $validators)) {\r\n            $updateValidator = $validators[$entityClass];\r\n\r\n            if(!$updateValidator->isValid($serializedEntity)) {\r\n                throw new EntityUpdateValidationException($updateValidator->getPropertyErrors());\r\n            }\r\n        }*/\r\n    }\r\n\r\n    protected validateDelete(serializedEntity: any) {\r\n        /*$validators = $this->entity->getEntityStore()->getDeleteValidators();\r\n\r\n        $entityClass = $this->getEntity()->name;\r\n\r\n        if(array_key_exists($entityClass, $validators)) {\r\n            $updateValidator = $validators[$entityClass];\r\n\r\n            if(!$updateValidator->isValid($serializedEntity)) {\r\n                throw new EntityDeleteValidationException($updateValidator->getPropertyErrors());\r\n            }\r\n        }*/\r\n    }\r\n}","import { DeleteSourceAction } from \"./deletesourceaction\";\r\nimport { Entity } from \"./entity\";\r\nimport { LoadSourceAction } from \"./loadsourceaction\";\r\nimport { NullSourceAction } from \"./nullsourceaction\";\r\nimport { SourceAction } from \"./sourceaction\";\r\nimport { UpdateSourceAction } from \"./updatesourceaction\";\r\n\r\nexport class SourceActionFactory {\r\n    public static serialize(sourceAction: SourceAction): any {\r\n        const serializedSourceAction: any = {};\r\n\r\n        serializedSourceAction[\"type\"] = sourceAction.type;\r\n        serializedSourceAction[\"entityKey\"] = sourceAction.entity.getKey();\r\n        serializedSourceAction[\"entityType\"] = sourceAction.entity.getName();\r\n        serializedSourceAction[\"entity\"] = sourceAction.entity.serialize();\r\n        serializedSourceAction[\"refKey\"] = sourceAction.entity.getRef() ? sourceAction.entity.getRef().getKey() : undefined;\r\n\r\n        return serializedSourceAction;\r\n    }\r\n\r\n    public static deserialize(serializedSourceAction: any, entity: Entity): SourceAction {\r\n        switch(serializedSourceAction[\"type\"]) {\r\n            case \"LoadSourceAction\":\r\n                return new LoadSourceAction(entity);\r\n            case \"UpdateSourceAction\":\r\n                return new UpdateSourceAction(entity);\r\n            case \"DeleteSourceAction\":\r\n                return new DeleteSourceAction(entity);\r\n        }\r\n\r\n        return new NullSourceAction(entity);\r\n    }   \r\n}","import { Entity } from \"./entity\";\r\nimport { EntityFactory } from \"./entityfactory\";\r\nimport { Source } from \"./source\";\r\nimport { SourceAction } from \"./sourceaction\";\r\n\r\nexport class UpdateSourceAction extends SourceAction {\r\n    constructor(entity: Entity) {\r\n        super(\"UpdateSourceAction\", entity);\r\n    }\r\n\r\n    public sync(source: Source): void {\r\n        const serializedEntity = this.entity.serialize();\r\n\r\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\r\n\r\n        this.validateUpdate(entityData);\r\n\r\n        const updatedEntity = source.update(entityData);\r\n\r\n        const entitySchema = EntityFactory.buildEntitySchemaFromData(this.entity, updatedEntity);\r\n\r\n        this.entity.deserialize(entitySchema);\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { EntityStore } from \"./entitystore\";\r\nimport { Source } from \"./source\";\r\nimport { Bridge } from \"./bridge\";\r\n\r\nexport { EntityStore, Source, Bridge }"],"names":["DeleteSourceAction","SourceAction","constructor","entity","super","sync","source","serializedEntity","this","serialize","entityData","EntityFactory","buildEntityDataFromSchema","validateDelete","delete","entityStore","name","ref","item","_properties","_isReferenced","_source","NullSource","_isItem","_isCollection","_item","_entityStore","_name","_key","undefined","getKey","_ref","register","load","_itemPrototype","newEntity","setKey","value","setName","getName","getRef","getProperties","getSource","getEntityStore","setSource","isReferenced","isCollection","setIsItem","isItem","getItem","getItemPrototype","get","index","add","deserialize","collectionSize","Object","keys","length","update","remove","toRemove","key","i","entityProperty","EntityProperty","entityItem","Entity","Proxy","EntityHandler","buildEntitySchemaFromData","isEntity","entitySchema","properties","target","property","receiver","set","obj","_isEntity","_value","_sources","_entities","_actions","addSource","entityName","sourceAction","syncTo","bridge","Promise","resolve","reject","serializedActions","action","SourceActionFactory","send","entities","entityClass","syncFrom","receivedActions","onSync","deserializedActions","serializedEntities","reply","LoadSourceAction","UpdateSourceAction","loadedEntity","validateLoad","Source","NullSourceAction","Error","type","_type","_entity","validateUpdate","serializedSourceAction","updatedEntity","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","EntityStore","Bridge"],"sourceRoot":""}