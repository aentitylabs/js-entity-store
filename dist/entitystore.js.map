{"version":3,"file":"entitystore.js","mappings":"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","sources":["webpack://jsentitystore/webpack/universalModuleDefinition","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/bridge.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/deletesourceaction.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entity.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entityfactory.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entityhandler.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entityproperty.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entitystore.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/loadsourceaction.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/nullsource.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/nullsourceaction.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/source.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/sourceaction.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/sourceactionfactory.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/updatesourceaction.ts","webpack://jsentitystore/webpack/bootstrap","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/main.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsentitystore\"] = factory();\n\telse\n\t\troot[\"jsentitystore\"] = factory();\n})(this, function() {\nreturn ","export abstract class Bridge {\n    public abstract send(actions: any, onReply: any): any;\n    public abstract reply(entities: any): void;\n}","import { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\n\nexport class DeleteSourceAction extends SourceAction {\n    constructor(entity: Entity) {\n        super(\"DeleteSourceAction\", entity);\n    }\n\n    public sync(source: Source): void {\n        const serializedEntity = this.entity.serialize();\n\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\n\n        this.validateDelete(entityData);\n\n        source.delete(entityData);\n    }\n}","import { EntityFactory } from \"./entityfactory\";\nimport { EntityProperty } from \"./entityproperty\";\nimport { EntityStore } from \"./entitystore\";\nimport { NullSource } from \"./nullsource\";\nimport { Source } from \"./source\";\n\nexport class Entity {\n    private _entityStore: EntityStore;\n    protected _properties: any = {};\n    private _name: string;\n    private _key: string;\n    private _ref: Entity|undefined;\n    private _isReferenced: boolean = false;\n    private _source: Source = new NullSource();\n    private _isItem: boolean = false;\n    private _isCollection: boolean = false;\n    protected _item: any = {};\n    protected _itemPrototype: Entity|undefined;\n\n\n    public constructor(entityStore: EntityStore, name: string, ref?: Entity, item?: any)\n    {\n        this._entityStore = entityStore;\n\n        this._name = name;\n        this._key = name;\n        this._item = item;\n        this._isCollection = item ? true : false;\n\n        let source;\n\n        if(ref != null && ref != undefined) {\n            this._key = ref.getKey() + \"=>\" + this._key;\n            this._isReferenced = true;\n            source = ref._source;\n        }\n\n        this._ref = ref;\n\n        this._entityStore.register(this, source);\n\n        if(!ref) {\n            this._ref = this;\n            this._entityStore.load(this);\n        }\n\n        if(this._item) {\n            this._itemPrototype = EntityFactory.newEntity(this._entityStore, this._item, this);\n        }\n    }\n\n    public setKey(value: string) {\n        this._key = value;\n    }\n\n    public getKey(): string {\n        return this._key;\n    }\n\n    public setName(value: string) {\n        this._name = value;\n    }\n\n    public getName(): string {\n        return this._name;\n    }\n\n    public getRef(): any {\n        return this._ref;\n    }\n\n    public getProperties(): any {\n        return this._properties;\n    }\n\n    public getSource() {\n        return this._source;\n    }\n\n    public getEntityStore() {\n        return this._entityStore;\n    }\n\n    public setSource(source: Source) {\n        this._source = source;\n    }\n\n    public isReferenced() {\n        return this._isReferenced;\n    }\n\n    public isCollection() {\n        return this._isCollection;\n    }\n\n    public setIsItem(value: boolean) {\n        this._isItem = value;\n    }\n\n    public isItem() {\n        return this._isItem;\n    }\n\n    public getItem() {\n        return this._item;\n    }\n\n    public getItemPrototype(): any {\n        return this._itemPrototype;\n    }\n\n    public delete() {\n        this._entityStore.delete(this);\n    }\n\n    public get(index: number) {\n        return this._properties[index].value;\n    }\n\n    public add(): Entity {\n        const entity = EntityFactory.newEntity(this._entityStore, this._item, this);\n\n        entity.deserialize(this.getItem());\n\n        const collectionSize = Object.keys(this.getProperties()).length;\n\n        this.getProperties()[collectionSize] = entity;\n\n        entity.setKey(entity.getKey() + \"[\" + (collectionSize) + \"]\");\n\n        entity.setIsItem(true);\n\n        this.getEntityStore().register(entity, this.getSource());\n\n        this.getEntityStore().update(entity);\n\n        this.getEntityStore().load(this);\n\n        return entity;\n    }\n\n    public remove(index: number) {\n        const toRemove = this.get(index);\n\n        this.getEntityStore().delete(toRemove);\n\n        this.getEntityStore().load(this);\n    }\n\n    public serialize(): any {\n        const serializedEntity: any = {};\n\n        serializedEntity[\"entity\"] = this.getName();\n        serializedEntity[\"properties\"] = {};\n        serializedEntity[\"ref\"] = this.isReferenced();\n\n        for(var key in this.getProperties()) {\n            serializedEntity[\"properties\"][key] = this.getProperties()[key].serialize();\n        }\n\n        return serializedEntity;\n    }\n    \n    public deserialize(entity: any) {\n        this.setName(entity[\"entity\"]);\n\n        if(!entity[\"properties\"]) {\n            return;\n        }\n\n        let i = 0;\n\n        for(let key in entity[\"properties\"]) {\n            const entityProperty = new EntityProperty(this.getEntityStore(), this);\n\n            entityProperty.deserialize(entity[\"properties\"][key]);\n\n            this.getProperties()[key] = entityProperty;\n\n            if(this.isCollection()) {\n                const entityItem = entityProperty.value;\n\n                entityItem.setKey(entityItem.getKey() + \"[\" + i + \"]\");\n\n                entityItem.setIsItem(true);\n\n                this.getEntityStore().register(entityItem, this.getSource());\n            }\n\n            i++;\n        }\n    }\n}\n","import { Entity } from \"./entity\";\nimport { EntityHandler } from \"./entityhandler\";\nimport { EntityStore } from \"./entitystore\";\n\nexport class EntityFactory {\n    public static newEntity(entityStore: EntityStore, entity: any, ref?: Entity) {\n        let newEntity: Entity|null = null;\n        \n        if(entity[\"collectionItem\"]) {\n            newEntity = new Entity(entityStore, entity[\"entity\"], ref, entity[\"collectionItem\"]);\n        }\n        else {\n            newEntity = new Entity(entityStore, entity[\"entity\"], ref);\n        }\n\n        newEntity.deserialize(entity);\n\n        const entityProxy = new Proxy(newEntity, new EntityHandler())\n\n        return entityProxy;\n    }\n\n    public static buildEntitySchemaFromData(entity: Entity, entityData: any): any {\n        const serializedEntity: any = {};\n\n        serializedEntity[\"entity\"] = entity.getName();\n        serializedEntity[\"properties\"] = {};\n        serializedEntity[\"ref\"] = entity.isReferenced();\n\n        for(let key in entityData) {\n            if(entity.isCollection() === true) {\n                serializedEntity[\"collectionItem\"] = entity.getItem();\n\n                if(entity.getItemPrototype()) {\n                    serializedEntity[\"properties\"][key] = EntityFactory.buildEntitySchemaFromData(entity.getItemPrototype(), entityData[key]);\n                }\n            }\n            else if(entity.getProperties()[key].isEntity === true) {\n                serializedEntity[\"properties\"][key] = EntityFactory.buildEntitySchemaFromData(entity.getProperties()[key].value, entityData[key]);\n            }\n            else {\n                serializedEntity[\"properties\"][key] = {\n                    \"value\": entityData[key]\n                };\n            }\n        }\n\n        return serializedEntity;\n    }\n\n    public static buildEntityDataFromSchema(entitySchema: any): any {\n        const entityData: any = {};\n\n        for(let key in entitySchema.properties) {\n            if(entitySchema.properties[key][\"entity\"]) {\n                entityData[key] = EntityFactory.buildEntityDataFromSchema(entitySchema.properties[key]);\n            }\n            else {\n                entityData[key] = entitySchema.properties[key][\"value\"];\n            }\n        }\n\n        return entityData;\n    }\n}\n","export class EntityHandler {\n    get(target: any, property: any, receiver: any): any {\n        if(target.getProperties()[property]) {\n            return target.getProperties()[property].value;\n        }\n\n        return target[property];\n    }\n\n    set(obj: any, property: any, value: any): boolean {\n        if(obj.getProperties()[property]) {\n            obj.getProperties()[property].value = value;\n\n            obj.getEntityStore().update(obj);\n\n            return true;\n        }\n\n        obj[property] = value;\n\n        return true;\n    }\n}","import { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { EntityStore } from \"./entitystore\";\n\nexport class EntityProperty {\n    private _entityStore: EntityStore;\n    private _ref: Entity|undefined;\n    private _isEntity: boolean = false;\n    private _value: any;\n\n\n    public constructor(entityStore: EntityStore, ref?: Entity)\n    {\n        this._entityStore = entityStore;\n        this._ref = ref;\n    }\n\n    public get isEntity() {\n        return this._isEntity;\n    }\n\n    public get value() {\n        return this._value;\n    }\n\n    public set value(value) {\n        this._value = value;\n    }\n\n    public serialize(): any {\n        if(this._isEntity === true) {\n            return this._value.serialize();\n        }\n\n        return {\n            \"value\": this._value\n        };\n    }\n    \n    public deserialize(entityProperty: any) {\n        if(entityProperty[\"entity\"]) {\n            const ref: Entity|undefined = entityProperty[\"ref\"] === true ? this._ref : undefined;\n\n            this._value = EntityFactory.newEntity(this._entityStore, entityProperty, ref);\n            this._isEntity = true;\n\n            this._value.deserialize(entityProperty);\n\n            return;\n        }\n\n        this._value = entityProperty[\"value\"];\n    }\n}","import { Bridge } from \"./bridge\";\nimport { DeleteSourceAction } from \"./deletesourceaction\";\nimport { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { LoadSourceAction } from \"./loadsourceaction\";\nimport { NullSource } from \"./nullsource\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\nimport { SourceActionFactory } from \"./sourceactionfactory\";\nimport { UpdateSourceAction } from \"./updatesourceaction\";\n\nexport class EntityStore {\n    private _sources: any = {};\n    private _entities: any = {};\n    private _actions: any = {};\n\n\n    public get actions() {\n        return this._actions;\n    }\n\n    public addSource(entityName: any, source: any) {\n        this._sources[entityName] = source;\n    }\n    \n    public register(entity: Entity, source?: Source): void {\n        this._entities[entity.getKey()] = entity;\n\n        if(!source) {\n            let entitySource = this._sources[entity.getName()];\n            \n            if(!entitySource) {\n                entity.setSource(new NullSource());\n            }\n            else {\n                entity.setSource(this._sources[entity.getName()]);\n            }\n        }\n        else {\n            entity.setSource(source);\n        }\n    }\n\n    public sync() {\n        while (Object.keys(this._actions).length > 0) {\n            const key = Object.keys(this._actions)[0];\n\n            const sourceAction: SourceAction = this._actions[key];\n\n            //TODO: gestire entità con source a null (null pattern!?)\n\n            /*$entityClass = get_class($sourceAction->getEntity());\n\n            if(array_key_exists($entityClass, $this->sources)) {\n                $sourceAction->sync($this->sources[get_class($sourceAction->getEntity())]);\n            }*/\n            sourceAction.sync(sourceAction.entity.getSource());\n\n            delete this._actions[key];\n        }\n    }\n\n    public syncTo(bridge: Bridge): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const serializedActions: any = {};\n\n            for(const key in this._actions) {\n                const action: SourceAction = this._actions[key];\n                //$entityClass = get_class($action->getEntity());\n    \n                //if(array_key_exists($entityClass, $this->sources)) {\n                    action.sync(action.entity.getSource());\n                //}\n    \n                serializedActions[key] = SourceActionFactory.serialize(action);\n            }\n\n            if(Object.keys(this._actions).length === 0) {\n                return resolve();\n            }\n    \n            bridge.send(serializedActions, (entities: any) => {\n                while (Object.keys(this._actions).length > 0) {\n                    const key = Object.keys(this._actions)[0];\n        \n                    const sourceAction: SourceAction = this._actions[key];\n        \n                    const entityClass = sourceAction.entity.getName();\n        \n                    if(entities[entityClass]) {\n                        sourceAction.entity.deserialize(entities[entityClass]);\n        \n                        if(this._sources[entityClass]) {\n                            sourceAction.sync(this._sources[entityClass]);\n                        }\n                    }\n        \n                    delete this._actions[key];\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    public syncFrom(bridge: Bridge, receivedActions: any, onSync: any) {\n        const deserializedActions: any = {};\n        const entities: any = {};\n\n        for(const key in receivedActions) {\n            const action: any = receivedActions[key];\n\n            if(!this._entities[action[\"entityKey\"]]) {\n                this._entities[action[\"entityKey\"]] = EntityFactory.newEntity(this, action[\"entity\"], this._entities[action[\"refKey\"]]);\n            }\n\n            const entity = this._entities[action[\"entityKey\"]];\n\n            entity.deserialize(action[\"entity\"]);\n\n            deserializedActions[key] = SourceActionFactory.deserialize(action, entity);\n\n            const entityClass = deserializedActions[key].entity.getName();\n\n            if(this._sources[entityClass]) {\n                deserializedActions[key].sync(this._sources[entityClass]);\n\n                entities[entityClass] = deserializedActions[key].entity;\n            }\n        }\n\n        onSync();\n\n        this.sync();\n\n        const serializedEntities: any = {};\n\n        for(const key in entities) {\n            serializedEntities[key] = entities[key].serialize();\n        }\n\n        bridge.reply(serializedEntities);\n    }\n\n    public load(entity: Entity): void {\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\n            return this.load(entity.getRef());\n        }\n\n        this._actions[entity.getKey() + \"::load\"] = new LoadSourceAction(entity);\n    }\n\n    public update(entity: Entity): void {\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\n            return this.update(entity.getRef());\n        }\n\n        this._actions[entity.getKey() + \"::update\"] = new UpdateSourceAction(entity);\n    }\n\n    public delete(entity: Entity): void {\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\n            return this.delete(entity.getRef());\n        }\n\n        this._actions[entity.getKey() + \"::delete\"] = new DeleteSourceAction(entity);\n    }\n}","import { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\n\nexport class LoadSourceAction extends SourceAction {\n    constructor(entity: Entity) {\n        super(\"LoadSourceAction\", entity);\n    }\n\n    public sync(source: Source): void {\n        const serializedEntity: any = this.entity.serialize();\n\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\n            \n        const loadedEntity = source.load(entityData);\n\n        this.validateLoad(loadedEntity);\n\n        const entitySchema = EntityFactory.buildEntitySchemaFromData(this.entity, loadedEntity);\n\n        this.entity.deserialize(entitySchema);\n    }\n}","import { Source } from \"./source\";\n\nexport class NullSource extends Source {\n    public load(entity: any) {\n        return entity;\n    }\n    \n    public update(entity: any) {\n        return entity;\n    }\n\n    public delete(entity: any): void {\n        \n    }\n}\n","import { Entity } from \"./entity\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\n\nexport class NullSourceAction extends SourceAction {\n    constructor(entity: Entity) {\n        super(\"NullSourceAction\", entity);\n    }\n\n    public sync(source: Source): void {\n        throw new Error(\"NullSourceAction: method not implemented.\");\n    }\n}","export abstract class Source {\n    public abstract load(entity: any): any;\n    public abstract update(entity: any): any;\n    public abstract delete(entity: any): void;\n}\n","import { Entity } from \"./entity\";\nimport { Source } from \"./source\";\n\nexport abstract class SourceAction {\n    private _type: string;\n    private _entity: Entity;\n\n\n    constructor(type: string, entity: Entity) {\n        this._type = type;\n        this._entity = entity;\n    }\n\n    public abstract sync(source: Source): void;\n\n    public get type() {\n        return this._type;\n    }\n\n    public get entity() {\n        return this._entity;\n    }\n\n    public set entity(value) {\n        this._entity = value;\n    }\n\n    protected validateLoad(serializedEntity: any) {\n        /*$validators = $this->entity->getEntityStore()->getLoadValidators();\n\n        $entityClass = $this->getEntity()->name;\n\n        if(array_key_exists($entityClass, $validators)) {\n            $updateValidator = $validators[$entityClass];\n\n            if(!$updateValidator->isValid($serializedEntity)) {\n                throw new EntityLoadValidationException($updateValidator->getPropertyErrors());\n            }\n        }*/\n    }\n\n    protected validateUpdate(serializedEntity: any) {\n        /*$validators = $this->entity->getEntityStore()->getUpdateValidators();\n\n        $entityClass = $this->getEntity()->name;\n\n        if(array_key_exists($entityClass, $validators)) {\n            $updateValidator = $validators[$entityClass];\n\n            if(!$updateValidator->isValid($serializedEntity)) {\n                throw new EntityUpdateValidationException($updateValidator->getPropertyErrors());\n            }\n        }*/\n    }\n\n    protected validateDelete(serializedEntity: any) {\n        /*$validators = $this->entity->getEntityStore()->getDeleteValidators();\n\n        $entityClass = $this->getEntity()->name;\n\n        if(array_key_exists($entityClass, $validators)) {\n            $updateValidator = $validators[$entityClass];\n\n            if(!$updateValidator->isValid($serializedEntity)) {\n                throw new EntityDeleteValidationException($updateValidator->getPropertyErrors());\n            }\n        }*/\n    }\n}","import { DeleteSourceAction } from \"./deletesourceaction\";\nimport { Entity } from \"./entity\";\nimport { LoadSourceAction } from \"./loadsourceaction\";\nimport { NullSourceAction } from \"./nullsourceaction\";\nimport { SourceAction } from \"./sourceaction\";\nimport { UpdateSourceAction } from \"./updatesourceaction\";\n\nexport class SourceActionFactory {\n    public static serialize(sourceAction: SourceAction): any {\n        const serializedSourceAction: any = {};\n\n        serializedSourceAction[\"type\"] = sourceAction.type;\n        serializedSourceAction[\"entityKey\"] = sourceAction.entity.getKey();\n        serializedSourceAction[\"entityType\"] = sourceAction.entity.getName();\n        serializedSourceAction[\"entity\"] = sourceAction.entity.serialize();\n        serializedSourceAction[\"refKey\"] = sourceAction.entity.getRef() ? sourceAction.entity.getRef().getKey() : undefined;\n\n        return serializedSourceAction;\n    }\n\n    public static deserialize(serializedSourceAction: any, entity: Entity): SourceAction {\n        switch(serializedSourceAction[\"type\"]) {\n            case \"LoadSourceAction\":\n                return new LoadSourceAction(entity);\n            case \"UpdateSourceAction\":\n                return new UpdateSourceAction(entity);\n            case \"DeleteSourceAction\":\n                return new DeleteSourceAction(entity);\n        }\n\n        return new NullSourceAction(entity);\n    }   \n}","import { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\n\nexport class UpdateSourceAction extends SourceAction {\n    constructor(entity: Entity) {\n        super(\"UpdateSourceAction\", entity);\n    }\n\n    public sync(source: Source): void {\n        const serializedEntity = this.entity.serialize();\n\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\n\n        this.validateUpdate(entityData);\n\n        const updatedEntity = source.update(entityData);\n\n        const entitySchema = EntityFactory.buildEntitySchemaFromData(this.entity, updatedEntity);\n\n        this.entity.deserialize(entitySchema);\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { EntityStore } from \"./entitystore\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { Entity } from \"./entity\";\nimport { Source } from \"./source\";\nimport { Bridge } from \"./bridge\";\n\nexport { EntityStore, EntityFactory, Entity, Source, Bridge }"],"names":["root","factory","exports","module","define","amd","this","DeleteSourceAction","SourceAction","constructor","entity","super","sync","source","serializedEntity","serialize","entityData","EntityFactory","buildEntityDataFromSchema","validateDelete","delete","entityStore","name","ref","item","_properties","_isReferenced","_source","NullSource","_isItem","_isCollection","_item","_entityStore","_name","_key","undefined","getKey","_ref","register","load","_itemPrototype","newEntity","setKey","value","setName","getName","getRef","getProperties","getSource","getEntityStore","setSource","isReferenced","isCollection","setIsItem","isItem","getItem","getItemPrototype","get","index","add","deserialize","collectionSize","Object","keys","length","update","remove","toRemove","key","i","entityProperty","EntityProperty","entityItem","Entity","Proxy","EntityHandler","buildEntitySchemaFromData","isEntity","entitySchema","properties","target","property","receiver","set","obj","_isEntity","_value","_sources","_entities","_actions","addSource","entityName","sourceAction","syncTo","bridge","Promise","resolve","reject","serializedActions","action","SourceActionFactory","send","entities","entityClass","syncFrom","receivedActions","onSync","deserializedActions","serializedEntities","reply","LoadSourceAction","UpdateSourceAction","loadedEntity","validateLoad","Source","NullSourceAction","Error","type","_type","_entity","validateUpdate","serializedSourceAction","updatedEntity","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","EntityStore","Bridge"],"sourceRoot":""}