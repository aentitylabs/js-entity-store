{"version":3,"file":"entitystore.js","mappings":"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","sources":["webpack://jsentitystore/webpack/universalModuleDefinition","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/bridge.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/deletesourceaction.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entity.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entityfactory.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entityhandler.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entityproperty.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/entitystore.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/loadsourceaction.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/nullsource.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/nullsourceaction.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/source.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/sourceaction.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/sourceactionfactory.ts","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/updatesourceaction.ts","webpack://jsentitystore/webpack/bootstrap","webpack://jsentitystore/./home/eagudio/work/aentity/workspace/js-entity-store/src/main.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsentitystore\"] = factory();\n\telse\n\t\troot[\"jsentitystore\"] = factory();\n})(this, function() {\nreturn ","export abstract class Bridge {\n    public abstract send(actions: any, onReply: any): any;\n    public abstract reply(entities: any): void;\n}","import { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\n\nexport class DeleteSourceAction extends SourceAction {\n    constructor(entity: Entity) {\n        super(\"DeleteSourceAction\", entity);\n    }\n\n    public sync(source: Source): void {\n        const serializedEntity = this.entity.serialize();\n\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\n\n        this.validateDelete(entityData);\n\n        source.delete(entityData);\n    }\n}","import { EntityFactory } from \"./entityfactory\";\nimport { EntityProperty } from \"./entityproperty\";\nimport { EntityStore } from \"./entitystore\";\nimport { NullSource } from \"./nullsource\";\nimport { Source } from \"./source\";\n\nexport class Entity {\n    private _entityStore: EntityStore;\n    protected _properties: any = {};\n    private _name: string;\n    private _key: string;\n    private _ref: Entity|undefined;\n    private _isReferenced: boolean = false;\n    private _source: Source = new NullSource();\n    private _isItem: boolean = false;\n    private _isCollection: boolean = false;\n    protected _item: any = {};\n    protected _itemPrototype: Entity|undefined;\n\n\n    public constructor(entityStore: EntityStore, name: string, ref?: Entity, item?: any)\n    {\n        this._entityStore = entityStore;\n\n        this._name = name;\n        this._key = name;\n        this._item = item;\n        this._isCollection = item ? true : false;\n\n        let source;\n\n        if(ref != null && ref != undefined) {\n            this._key = ref.getKey() + \"=>\" + this._key;\n            this._isReferenced = true;\n            source = ref._source;\n        }\n\n        this._ref = ref;\n\n        this._entityStore.register(this, source);\n\n        if(!ref) {\n            this._ref = this;\n            this._entityStore.load(this);\n        }\n\n        if(this._item) {\n            this._itemPrototype = EntityFactory.newEntity(this._entityStore, this._item, this);\n        }\n    }\n\n    public setKey(value: string) {\n        this._key = value;\n    }\n\n    public getKey(): string {\n        return this._key;\n    }\n\n    public setName(value: string) {\n        this._name = value;\n    }\n\n    public getName(): string {\n        return this._name;\n    }\n\n    public getRef(): any {\n        return this._ref;\n    }\n\n    public getProperties(): any {\n        return this._properties;\n    }\n\n    public getSource() {\n        return this._source;\n    }\n\n    public getEntityStore() {\n        return this._entityStore;\n    }\n\n    public setSource(source: Source) {\n        this._source = source;\n    }\n\n    public isReferenced() {\n        return this._isReferenced;\n    }\n\n    public isCollection() {\n        return this._isCollection;\n    }\n\n    public setIsItem(value: boolean) {\n        this._isItem = value;\n    }\n\n    public isItem() {\n        return this._isItem;\n    }\n\n    public getItem() {\n        return this._item;\n    }\n\n    public getItemPrototype(): any {\n        return this._itemPrototype;\n    }\n\n    public delete() {\n        this._entityStore.delete(this);\n    }\n\n    public get(index: number) {\n        return this._properties[index].value;\n    }\n\n    public add(): Entity {\n        const entity = EntityFactory.newEntity(this._entityStore, this._item, this);\n\n        entity.deserialize(this.getItem());\n\n        const collectionSize = Object.keys(this.getProperties()).length;\n\n        this.getProperties()[collectionSize] = entity;\n\n        entity.setKey(entity.getKey() + \"[\" + (collectionSize) + \"]\");\n\n        entity.setIsItem(true);\n\n        this.getEntityStore().register(entity, this.getSource());\n\n        this.getEntityStore().update(entity);\n\n        this.getEntityStore().load(this);\n\n        return entity;\n    }\n\n    public remove(index: number) {\n        const toRemove = this.get(index);\n\n        this.getEntityStore().delete(toRemove);\n\n        this.getEntityStore().load(this);\n    }\n\n    public serialize(): any {\n        const serializedEntity: any = {};\n\n        serializedEntity[\"entity\"] = this.getName();\n        serializedEntity[\"properties\"] = {};\n        serializedEntity[\"ref\"] = this.isReferenced();\n\n        for(var key in this.getProperties()) {\n            serializedEntity[\"properties\"][key] = this.getProperties()[key].serialize();\n        }\n\n        return serializedEntity;\n    }\n    \n    public deserialize(entity: any) {\n        this.setName(entity[\"entity\"]);\n\n        if(!entity[\"properties\"]) {\n            return;\n        }\n\n        let i = 0;\n\n        for(let key in entity[\"properties\"]) {\n            const entityProperty = new EntityProperty(this.getEntityStore(), this);\n\n            entityProperty.deserialize(entity[\"properties\"][key]);\n\n            this.getProperties()[key] = entityProperty;\n\n            if(this.isCollection()) {\n                const entityItem = entityProperty.value;\n\n                entityItem.setKey(entityItem.getKey() + \"[\" + i + \"]\");\n\n                entityItem.setIsItem(true);\n\n                this.getEntityStore().register(entityItem, this.getSource());\n            }\n\n            i++;\n        }\n    }\n}\n","import { Entity } from \"./entity\";\nimport { EntityHandler } from \"./entityhandler\";\nimport { EntityStore } from \"./entitystore\";\n\nexport class EntityFactory {\n    public static newEntity(entityStore: EntityStore, entity: any, ref?: Entity) {\n        let newEntity: Entity|null = null;\n        \n        if(entity[\"collectionItem\"]) {\n            newEntity = new Entity(entityStore, entity[\"entity\"], ref, entity[\"collectionItem\"]);\n        }\n        else {\n            newEntity = new Entity(entityStore, entity[\"entity\"], ref);\n        }\n\n        newEntity.deserialize(entity);\n\n        const entityProxy = new Proxy(newEntity, new EntityHandler())\n\n        return entityProxy;\n    }\n\n    public static buildEntitySchemaFromData(entity: Entity, entityData: any): any {\n        const serializedEntity: any = {};\n\n        serializedEntity[\"entity\"] = entity.getName();\n        serializedEntity[\"properties\"] = {};\n        serializedEntity[\"ref\"] = entity.isReferenced();\n\n        for(let key in entityData) {\n            if(entity.isCollection() === true) {\n                serializedEntity[\"collectionItem\"] = entity.getItem();\n\n                if(entity.getItemPrototype()) {\n                    serializedEntity[\"properties\"][key] = EntityFactory.buildEntitySchemaFromData(entity.getItemPrototype(), entityData[key]);\n                }\n            }\n            else if(entity.getProperties()[key].isEntity === true) {\n                serializedEntity[\"properties\"][key] = EntityFactory.buildEntitySchemaFromData(entity.getProperties()[key].value, entityData[key]);\n            }\n            else {\n                serializedEntity[\"properties\"][key] = {\n                    \"value\": entityData[key]\n                };\n            }\n        }\n\n        return serializedEntity;\n    }\n\n    public static buildEntityDataFromSchema(entitySchema: any): any {\n        const entityData: any = {};\n\n        for(let key in entitySchema.properties) {\n            if(entitySchema.properties[key][\"entity\"]) {\n                entityData[key] = EntityFactory.buildEntityDataFromSchema(entitySchema.properties[key]);\n            }\n            else {\n                entityData[key] = entitySchema.properties[key][\"value\"];\n            }\n        }\n\n        return entityData;\n    }\n}\n","export class EntityHandler {\n    get(target: any, property: any, receiver: any): any {\n        if(target.getProperties()[property]) {\n            return target.getProperties()[property].value;\n        }\n\n        return target[property];\n    }\n\n    set(obj: any, property: any, value: any): boolean {\n        if(obj.getProperties()[property]) {\n            obj.getProperties()[property].value = value;\n\n            obj.getEntityStore().update(obj);\n\n            return true;\n        }\n\n        obj[property] = value;\n\n        return true;\n    }\n}","import { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { EntityStore } from \"./entitystore\";\n\nexport class EntityProperty {\n    private _entityStore: EntityStore;\n    private _ref: Entity|undefined;\n    private _isEntity: boolean = false;\n    private _value: any;\n\n\n    public constructor(entityStore: EntityStore, ref?: Entity)\n    {\n        this._entityStore = entityStore;\n        this._ref = ref;\n    }\n\n    public get isEntity() {\n        return this._isEntity;\n    }\n\n    public get value() {\n        return this._value;\n    }\n\n    public set value(value) {\n        this._value = value;\n    }\n\n    public serialize(): any {\n        if(this._isEntity === true) {\n            return this._value.serialize();\n        }\n\n        return {\n            \"value\": this._value\n        };\n    }\n    \n    public deserialize(entityProperty: any) {\n        if(entityProperty[\"entity\"]) {\n            const ref: Entity|undefined = entityProperty[\"ref\"] === true ? this._ref : undefined;\n\n            this._value = EntityFactory.newEntity(this._entityStore, entityProperty, ref);\n            this._isEntity = true;\n\n            this._value.deserialize(entityProperty);\n\n            return;\n        }\n\n        this._value = entityProperty[\"value\"];\n    }\n}","import { Bridge } from \"./bridge\";\nimport { DeleteSourceAction } from \"./deletesourceaction\";\nimport { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { LoadSourceAction } from \"./loadsourceaction\";\nimport { NullSource } from \"./nullsource\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\nimport { SourceActionFactory } from \"./sourceactionfactory\";\nimport { UpdateSourceAction } from \"./updatesourceaction\";\n\nexport class EntityStore {\n    private _sources: any = {};\n    private _bridges: any = {};\n    private _entities: any = {};\n    private _actions: any = {};\n\n\n    public get actions() {\n        return this._actions;\n    }\n\n    public addSource(entityName: string, source: any) {\n        this._sources[entityName] = source;\n    }\n\n    public addBridge(bridgeName: string, bridge: any) {\n        this._bridges[bridgeName] = bridge;\n    }\n    \n    public register(entity: Entity, source?: Source): void {\n        this._entities[entity.getKey()] = entity;\n\n        if(!source) {\n            let entitySource = this._sources[entity.getName()];\n            \n            if(!entitySource) {\n                entity.setSource(new NullSource());\n            }\n            else {\n                entity.setSource(this._sources[entity.getName()]);\n            }\n        }\n        else {\n            entity.setSource(source);\n        }\n    }\n\n    public sync() {\n        while (Object.keys(this._actions).length > 0) {\n            const key = Object.keys(this._actions)[0];\n\n            const sourceAction: SourceAction = this._actions[key];\n\n            //TODO: gestire entità con source a null (null pattern!?)\n\n            /*$entityClass = get_class($sourceAction->getEntity());\n\n            if(array_key_exists($entityClass, $this->sources)) {\n                $sourceAction->sync($this->sources[get_class($sourceAction->getEntity())]);\n            }*/\n            sourceAction.sync(sourceAction.entity.getSource());\n\n            delete this._actions[key];\n        }\n    }\n\n    public syncTo(bridge: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const serializedActions: any = {};\n\n            for(const key in this._actions) {\n                const action: SourceAction = this._actions[key];\n                //$entityClass = get_class($action->getEntity());\n    \n                //if(array_key_exists($entityClass, $this->sources)) {\n                    action.sync(action.entity.getSource());\n                //}\n    \n                serializedActions[key] = SourceActionFactory.serialize(action);\n            }\n\n            if(Object.keys(serializedActions).length === 0) {\n                return resolve();\n            }\n    \n            this._bridges[bridge].send(serializedActions, (entities: any) => {\n                while (Object.keys(this._actions).length > 0) {\n                    const key = Object.keys(this._actions)[0];\n        \n                    const sourceAction: SourceAction = this._actions[key];\n        \n                    const entityClass = sourceAction.entity.getName();\n        \n                    if(entities[entityClass]) {\n                        sourceAction.entity.deserialize(entities[entityClass]);\n        \n                        if(this._sources[entityClass]) {\n                            sourceAction.sync(this._sources[entityClass]);\n                        }\n                    }\n        \n                    delete this._actions[key];\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    public syncFrom(bridge: string, receivedActions: any, onSync: any) {\n        const deserializedActions: any = {};\n        const entities: any = {};\n\n        for(const key in receivedActions) {\n            const action: any = receivedActions[key];\n\n            if(!this._entities[action[\"entityKey\"]]) {\n                this._entities[action[\"entityKey\"]] = EntityFactory.newEntity(this, action[\"entity\"], this._entities[action[\"refKey\"]]);\n            }\n\n            const entity = this._entities[action[\"entityKey\"]];\n\n            entity.deserialize(action[\"entity\"]);\n\n            deserializedActions[key] = SourceActionFactory.deserialize(action, entity);\n\n            const entityClass = deserializedActions[key].entity.getName();\n\n            if(this._sources[entityClass]) {\n                deserializedActions[key].sync(this._sources[entityClass]);\n\n                entities[entityClass] = deserializedActions[key].entity;\n            }\n        }\n\n        onSync();\n\n        this.sync();\n\n        const serializedEntities: any = {};\n\n        for(const key in entities) {\n            serializedEntities[key] = entities[key].serialize();\n        }\n\n        this._bridges[bridge].reply(serializedEntities);\n    }\n\n    public load(entity: Entity): void {\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\n            return this.load(entity.getRef());\n        }\n\n        this._actions[entity.getKey() + \"::load\"] = new LoadSourceAction(entity);\n    }\n\n    public update(entity: Entity): void {\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\n            return this.update(entity.getRef());\n        }\n\n        this._actions[entity.getKey() + \"::update\"] = new UpdateSourceAction(entity);\n    }\n\n    public delete(entity: Entity): void {\n        if(entity.isReferenced() && !entity.isItem() && entity.getRef()) {\n            return this.delete(entity.getRef());\n        }\n\n        this._actions[entity.getKey() + \"::delete\"] = new DeleteSourceAction(entity);\n    }\n}","import { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\n\nexport class LoadSourceAction extends SourceAction {\n    constructor(entity: Entity) {\n        super(\"LoadSourceAction\", entity);\n    }\n\n    public sync(source: Source): void {\n        const serializedEntity: any = this.entity.serialize();\n\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\n            \n        const loadedEntity = source.load(entityData);\n\n        this.validateLoad(loadedEntity);\n\n        const entitySchema = EntityFactory.buildEntitySchemaFromData(this.entity, loadedEntity);\n\n        this.entity.deserialize(entitySchema);\n    }\n}","import { Source } from \"./source\";\n\nexport class NullSource extends Source {\n    public load(entity: any) {\n        return entity;\n    }\n    \n    public update(entity: any) {\n        return entity;\n    }\n\n    public delete(entity: any): void {\n        \n    }\n}\n","import { Entity } from \"./entity\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\n\nexport class NullSourceAction extends SourceAction {\n    constructor(entity: Entity) {\n        super(\"NullSourceAction\", entity);\n    }\n\n    public sync(source: Source): void {\n        throw new Error(\"NullSourceAction: method not implemented.\");\n    }\n}","export abstract class Source {\n    public abstract load(entity: any): any;\n    public abstract update(entity: any): any;\n    public abstract delete(entity: any): void;\n}\n","import { Entity } from \"./entity\";\nimport { Source } from \"./source\";\n\nexport abstract class SourceAction {\n    private _type: string;\n    private _entity: Entity;\n\n\n    constructor(type: string, entity: Entity) {\n        this._type = type;\n        this._entity = entity;\n    }\n\n    public abstract sync(source: Source): void;\n\n    public get type() {\n        return this._type;\n    }\n\n    public get entity() {\n        return this._entity;\n    }\n\n    public set entity(value) {\n        this._entity = value;\n    }\n\n    protected validateLoad(serializedEntity: any) {\n        /*$validators = $this->entity->getEntityStore()->getLoadValidators();\n\n        $entityClass = $this->getEntity()->name;\n\n        if(array_key_exists($entityClass, $validators)) {\n            $updateValidator = $validators[$entityClass];\n\n            if(!$updateValidator->isValid($serializedEntity)) {\n                throw new EntityLoadValidationException($updateValidator->getPropertyErrors());\n            }\n        }*/\n    }\n\n    protected validateUpdate(serializedEntity: any) {\n        /*$validators = $this->entity->getEntityStore()->getUpdateValidators();\n\n        $entityClass = $this->getEntity()->name;\n\n        if(array_key_exists($entityClass, $validators)) {\n            $updateValidator = $validators[$entityClass];\n\n            if(!$updateValidator->isValid($serializedEntity)) {\n                throw new EntityUpdateValidationException($updateValidator->getPropertyErrors());\n            }\n        }*/\n    }\n\n    protected validateDelete(serializedEntity: any) {\n        /*$validators = $this->entity->getEntityStore()->getDeleteValidators();\n\n        $entityClass = $this->getEntity()->name;\n\n        if(array_key_exists($entityClass, $validators)) {\n            $updateValidator = $validators[$entityClass];\n\n            if(!$updateValidator->isValid($serializedEntity)) {\n                throw new EntityDeleteValidationException($updateValidator->getPropertyErrors());\n            }\n        }*/\n    }\n}","import { DeleteSourceAction } from \"./deletesourceaction\";\nimport { Entity } from \"./entity\";\nimport { LoadSourceAction } from \"./loadsourceaction\";\nimport { NullSourceAction } from \"./nullsourceaction\";\nimport { SourceAction } from \"./sourceaction\";\nimport { UpdateSourceAction } from \"./updatesourceaction\";\n\nexport class SourceActionFactory {\n    public static serialize(sourceAction: SourceAction): any {\n        const serializedSourceAction: any = {};\n\n        serializedSourceAction[\"type\"] = sourceAction.type;\n        serializedSourceAction[\"entityKey\"] = sourceAction.entity.getKey();\n        serializedSourceAction[\"entityType\"] = sourceAction.entity.getName();\n        serializedSourceAction[\"entity\"] = sourceAction.entity.serialize();\n        serializedSourceAction[\"refKey\"] = sourceAction.entity.getRef() ? sourceAction.entity.getRef().getKey() : undefined;\n\n        return serializedSourceAction;\n    }\n\n    public static deserialize(serializedSourceAction: any, entity: Entity): SourceAction {\n        switch(serializedSourceAction[\"type\"]) {\n            case \"LoadSourceAction\":\n                return new LoadSourceAction(entity);\n            case \"UpdateSourceAction\":\n                return new UpdateSourceAction(entity);\n            case \"DeleteSourceAction\":\n                return new DeleteSourceAction(entity);\n        }\n\n        return new NullSourceAction(entity);\n    }   \n}","import { Entity } from \"./entity\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { Source } from \"./source\";\nimport { SourceAction } from \"./sourceaction\";\n\nexport class UpdateSourceAction extends SourceAction {\n    constructor(entity: Entity) {\n        super(\"UpdateSourceAction\", entity);\n    }\n\n    public sync(source: Source): void {\n        const serializedEntity = this.entity.serialize();\n\n        const entityData = EntityFactory.buildEntityDataFromSchema(serializedEntity);\n\n        this.validateUpdate(entityData);\n\n        const updatedEntity = source.update(entityData);\n\n        const entitySchema = EntityFactory.buildEntitySchemaFromData(this.entity, updatedEntity);\n\n        this.entity.deserialize(entitySchema);\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { EntityStore } from \"./entitystore\";\nimport { EntityFactory } from \"./entityfactory\";\nimport { Entity } from \"./entity\";\nimport { Source } from \"./source\";\nimport { Bridge } from \"./bridge\";\n\nexport { EntityStore, EntityFactory, Entity, Source, Bridge }"],"names":[],"sourceRoot":""}