var EntityStore;(()=>{"use strict";var e={665:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DeleteSourceAction=void 0;const s=i(58);class r extends s.SourceAction{constructor(e){super("DeleteSourceAction",e)}sync(e){const t=this.entity.serialize();this.validateDelete(t),e.delete(t)}}t.DeleteSourceAction=r},753:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Entity=void 0;const s=i(608),r=i(92),n=i(190);t.Entity=class{constructor(e,t,i,s){let r;this._properties={},this._isReferenced=!1,this._source=new n.NullSource,this._isItem=!1,this._isCollection=!1,this._item={},this._entityStore=e,this._name=t,this._key=t,this._item=s,this._isCollection=!!s,null!=i&&null!=i&&(this._key=i.key+"=>"+this._key,this._isReferenced=!0,r=i._source),this._ref=i,this._entityStore.register(this,r),i||(this._ref=this,this._entityStore.load(this))}set key(e){this._key=e}get key(){return this._key}get name(){return this._name}get ref(){return this._ref}get properties(){return this._properties}get source(){return this._source}get entityStore(){return this._entityStore}set source(e){this._source=e}get isReferenced(){return this._isReferenced}set isItem(e){this._isItem=e}get isItem(){return this._isItem}delete(){this._entityStore.delete(this)}get(e){return this.properties[e].value}add(){const e=s.EntityFactory.newEntity(this._entityStore,this._item,this);e.deserialize(this._item);const t=Object.keys(this._properties).length;return this._properties[t]=e,e._key=e._key+"["+t+"]",e._isItem=!0,this.entityStore.register(e,this._source),this._entityStore.update(e),this._entityStore.load(this),e}remove(e){const t=this.get(e);this._entityStore.delete(t),this._entityStore.load(this)}serialize(){const e={};for(var t in e.entity=this._name,e.properties={},e.ref=this._isReferenced,this._properties)e.properties[t]=this._properties[t].serialize();return e}deserialize(e){if(this._name=e.entity,!e.properties)return;let t=0;for(let i in e.properties){const s=new r.EntityProperty(this._entityStore,this);if(s.deserialize(e.properties[i]),this._properties[i]=s,this._isCollection){const e=s.value;e.key=e.key+"["+t+"]",e.isItem=!0,this._entityStore.register(e,this.source)}t++}}}},608:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EntityFactory=void 0;const s=i(753),r=i(557);t.EntityFactory=class{static newEntity(e,t,i){let n=null;return n=t.collectionItem?new s.Entity(e,t.entity,i,t.collectionItem):new s.Entity(e,t.entity,i),n.deserialize(t),new Proxy(n,new r.EntityHandler)}}},557:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EntityHandler=void 0,t.EntityHandler=class{get(e,t,i){return e.properties[t]?e.properties[t].value:e[t]}set(e,t,i){return e.properties[t]?(e.properties[t].value=i,e.entityStore.update(e),!0):(e[t]=i,!0)}}},92:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EntityProperty=void 0;const s=i(608);t.EntityProperty=class{constructor(e,t){this._isEntity=!1,this._entityStore=e,this._ref=t}get isEntity(){return this._isEntity}get value(){return this._value}set value(e){this._value=e}serialize(){return!0===this._isEntity?this._value.serialize():{value:this._value}}deserialize(e){if(e.entity){const t=!0===e.ref?this._ref:void 0;return this._value=s.EntityFactory.newEntity(this._entityStore,e,t),this._isEntity=!0,void this._value.deserialize(e)}this._value=e.value}}},328:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LoadSourceAction=void 0;const s=i(58);class r extends s.SourceAction{constructor(e){super("LoadSourceAction",e)}sync(e){const t=this.entity.serialize(),i=e.load(t);this.validateLoad(i),this.entity.deserialize(i)}}t.LoadSourceAction=r},190:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NullSource=void 0;const s=i(886);class r extends s.Source{load(e){return e}update(e){return e}delete(e){}}t.NullSource=r},625:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NullSourceAction=void 0;const s=i(58);class r extends s.SourceAction{constructor(e){super("NullSourceAction",e)}sync(e){throw new Error("NullSourceAction: method not implemented.")}}t.NullSourceAction=r},886:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Source=void 0,t.Source=class{}},58:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SourceAction=void 0,t.SourceAction=class{constructor(e,t){this._type=e,this._entity=t}get type(){return this._type}get entity(){return this._entity}set entity(e){this._entity=e}validateLoad(e){}validateUpdate(e){}validateDelete(e){}}},172:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SourceActionFactory=void 0;const s=i(665),r=i(328),n=i(625),o=i(246);t.SourceActionFactory=class{static serialize(e){const t={};return t.type=e.type,t.entityKey=e.entity.key,t.entityType=e.entity.name,t.entity=e.entity.serialize(),t.refKey=e.entity.ref?e.entity.ref.key:void 0,t}static deserialize(e,t){switch(e.type){case"LoadSourceAction":return new r.LoadSourceAction(t);case"UpdateSourceAction":return new o.UpdateSourceAction(t);case"DeleteSourceAction":return new s.DeleteSourceAction(t)}return new n.NullSourceAction(t)}}},246:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UpdateSourceAction=void 0;const s=i(58);class r extends s.SourceAction{constructor(e){super("UpdateSourceAction",e)}sync(e){const t=this.entity.serialize();this.validateUpdate(t);const i=e.update(t);this.entity.deserialize(i)}}t.UpdateSourceAction=r}},t={};function i(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,i),n.exports}var s={};(()=>{var e=s;Object.defineProperty(e,"__esModule",{value:!0}),e.EntityStore=void 0;const t=i(665),r=i(608),n=i(328),o=i(190),c=i(172),u=i(246);e.EntityStore=class{constructor(){this._sources={},this._entities={},this._actions={}}get actions(){return this._actions}addSource(e,t){this._sources[e]=t}register(e,t){if(this._entities[e.key]=e,t)e.source=t;else{let t=this._sources[e.name];e.source=t?this._sources[e.name]:new o.NullSource}}sync(){for(;Object.keys(this._actions).length>0;){const e=Object.keys(this._actions)[0],t=this._actions[e];t.sync(t.entity.source),delete this._actions[e]}}syncTo(e){const t={};for(const e in this._actions){const i=this._actions[e];i.sync(i.entity.source),t[e]=c.SourceActionFactory.serialize(i)}const i=e.send(t);for(;Object.keys(this._actions).length>0;){const e=Object.keys(this._actions)[0],t=this._actions[e],s=t.entity.name;i[s]&&(t.entity.deserialize(i[s]),t.sync(this._sources[s])),delete this._actions[e]}}syncFrom(e,t){const i={},s={};for(const e in t){const n=t[e];this._entities[n.entityKey]||(this._entities[n.entityKey]=r.EntityFactory.newEntity(this,n.entity,this._entities[n.refKey]));const o=this._entities[n.entityKey];o.deserialize(n.entity),i[e]=c.SourceActionFactory.deserialize(n,o);const u=i[e].entity.name;this._sources[u]&&(i[e].sync(this._sources[u]),s[u]=i[e].entity.serialize())}this.sync(),e.reply(s)}load(e){if(e.isReferenced&&!e.isItem&&e.ref)return this.load(e.ref);this._actions[e.key+"::load"]=new n.LoadSourceAction(e)}update(e){if(e.isReferenced&&!e.isItem&&e.ref)return this.update(e.ref);this._actions[e.key+"::update"]=new u.UpdateSourceAction(e)}delete(e){if(e.isReferenced&&!e.isItem&&e.ref)return this.delete(e.ref);this._actions[e.key+"::delete"]=new t.DeleteSourceAction(e)}}})(),EntityStore=s})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,